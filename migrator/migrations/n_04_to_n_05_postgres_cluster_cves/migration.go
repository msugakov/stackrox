// Code generated by pg-bindings generator. DO NOT EDIT.
package n4ton5

import (
	"context"

	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/pkg/errors"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/migrator/migrations"
	"github.com/stackrox/rox/migrator/migrations/loghelper"
	legacy "github.com/stackrox/rox/migrator/migrations/n_04_to_n_05_postgres_cluster_cves/legacy/dackbox"
	ccPgStore "github.com/stackrox/rox/migrator/migrations/n_04_to_n_05_postgres_cluster_cves/postgres/cluster_cves"
	icPgStore "github.com/stackrox/rox/migrator/migrations/n_04_to_n_05_postgres_cluster_cves/postgres/image_cves"
	ncPgStore "github.com/stackrox/rox/migrator/migrations/n_04_to_n_05_postgres_cluster_cves/postgres/node_cves"
	"github.com/stackrox/rox/migrator/types"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/rocksdb"
	"github.com/stackrox/rox/pkg/sac"
	"gorm.io/gorm"
)

var (
	migration = types.Migration{
		StartingSeqNum: 100,
		VersionAfter:   storage.Version{SeqNum: 101},
		Run: func(databases *types.Databases) error {
			legacyStore := legacy.New(databases.PkgRocksDB)
			if err := move(databases.PkgRocksDB, databases.GormDB, databases.PostgresDB, legacyStore); err != nil {
				return errors.Wrap(err,
					"moving cluster_cves from rocksdb to postgres")
			}
			return nil
		},
	}
	batchSize = 10000
	schema    = pkgSchema.ClusterCvesSchema
	log       = loghelper.LogWrapper{}
)

func move(legacyDB *rocksdb.RocksDB, gormDB *gorm.DB, postgresDB *pgxpool.Pool, legacyStore legacy.Store) error {
	ctx := sac.WithAllAccess(context.Background())
	clusterStore := ccPgStore.New(postgresDB)
	imageStore := icPgStore.New(postgresDB)
	nodeStore := ncPgStore.New(postgresDB)
	pkgSchema.ApplySchemaForTable(context.Background(), gormDB, schema.Table)
	var clusterCves []*storage.CVE
	var err error
	legacyStore.Walk(ctx, func(obj *storage.CVE) error {
		clusterCves = append(clusterCves, obj)
		if len(clusterCves) == 10*batchSize {
			if err := store.UpsertMany(ctx, clusterCves); err != nil {
				log.WriteToStderrf("failed to persist cluster_cves to store %v", err)
				return err
			}
			clusterCves = clusterCves[:0]
		}
		return nil
	})
	if len(clusterCves) > 0 {
		if err = store.UpsertMany(ctx, clusterCves); err != nil {
			log.WriteToStderrf("failed to persist cluster_cves to store %v", err)
			return err
		}
	}
	return nil
}

func init() {
	migrations.MustRegisterMigration(migration)
}
